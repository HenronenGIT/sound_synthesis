#!/usr/bin/env python3
import sys
import pyaudio
import numpy as np
import json
#import math
#from pyaudio import PyAudio
from scipy.io.wavfile import write

sample_rate = 44100


def play_note(note, p):
	# p = pyaudio.PyAudio()
	# volume = 0.5
	stream = p.open(format=pyaudio.paFloat32,
					channels=1,
					rate=sample_rate,
					output=True)
	stream.write(note)

def convert_note_to_hz(char):
	file = open("notes.txt", 'r')
	hz = 0
	lines = file.readlines()
	for line in lines:
		if (char in line):
			arr = line.split()
			hz = float(arr[1])
	file.close()
	return (hz)

def music_create(tracks, total_tracks):
	duration = []
	freqs = []
	i = 0
	while i < total_tracks:
		j = 0
		while j < tracks[i]["total"]:
			hz = convert_note_to_hz(tracks[i]["pitch"][j])
			freqs.append(hz)
			time = tracks[i]["duration"][j]
			duration.append(time)
			j += 1
		i += 1
	notes = []
	i = 0
	for freq in freqs:
		note = (np.sin(2 * np.pi * np.arange(sample_rate*duration[i])*freq/sample_rate)).astype(np.float32)
		notes.append(note)
		i += 1

	p = pyaudio.PyAudio()
	for note in notes:
		play_note(note, p)
	# stream.stop_stream()
	# stream.close()
	# close PyAudio (7)
	p.terminate()

def collect_info(f):
	lines = f.readlines()
	tempo_word = 'tempo'
	tracks_word = 'tracks'
	i = 0
	count = 0
	track2 = dict()
	total_tracks = 0
	for line in lines:
		if tempo_word in line:
			for word in line.split():
				if word.isdigit():
					tempo = int(word)
		if tracks_word in line:
			tracks = line.split(' ')[1]
			tracks = tracks.replace("\n", "")
			tracks = tracks.split(',')
		total_count = 0
		if line[0].isdigit():
			# dynamicaly creates dictionary to store tracks in
			track2[count] = {"nbr": 0, "tracks": "", "pitch": [], "duration": [], "total": 0}
			
			# collecting nbr of track
			track2[count].update(nbr=int(line.split(':')[0]))
			#print(track2[count]["nbr"])
			track2[count].update(tracks=tracks[track2[count]["nbr"] - 1])

			# collect pitch, alteration, octave and duration
			strstr = line.replace('\n', '')
			strstr = strstr.replace('|', '')
			string = strstr.split(' ')
			string.pop(0)
			prev = 60 / tempo
			prev_octave = 4
			total_tracks += 1
			for word in string:
				j = 0
				octave_found = 0
				alter_found = 0
				stage = 0
				while j < len(word):
					if j == 0:
						total_count += 1
					# collecting pitch
					s = ''
					while j < len(word) and word[j] != '/':
						if j == 0:
							s += word[j].upper()
						else:
							s += word[j]
						j += 1
					if (len(s) == 1):
						s += '0'
					track2[count]["pitch"].append(s)
					
					# collecting duration
					if j == len(word):
						track2[count]["duration"].append(prev)
					elif word[j] == '/':
						s = ''
						j += 1
						while j < len(word):
							s += word[j]
							j += 1
						track2[count]["duration"].append(float(s))
						prev = float(s)
					j += 1
			track2[count].update(total=total_count)
			count += 1
		i += 1
	# print(json.dumps(track2, sort_keys=False, indent=1))
	music_create(track2, total_tracks)

def main(argv, argc):
	if argc == 2:
		f = open(argv[1], "r")
		collect_info(f)
	else:
		print("Usage: ./minisynth /path/to/file")

if __name__ == "__main__":
	main(sys.argv, len(sys.argv))

#pg.mixer.quit()
#pg.quit()